import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url = 'https://maven.parchmentmc.org' }
	maven { url = "https://maven.supersanta.me/snapshots" }
	maven { url = "https://maven.nucleoid.xyz/" }
}

loom {
	splitEnvironmentSourceSets()

	runConfigs.configureEach {
		ideConfigGenerated = true
		vmArgs '-Dmixin.debug.export=true'
	}

	mods {
		"twists" {
			sourceSet sourceSets.main
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings(loom.layered {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.parchment_version}@zip")
	})
//	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation("net.fabricmc:fabric-language-kotlin:${project.fabric_language_kotlin_version}")


	include(modImplementation "net.casualchampionships:arcade-commands:${project.arcade_version}")
	include(modImplementation "net.casualchampionships:arcade-events-server:${project.arcade_version}")
	include(modImplementation "net.casualchampionships:arcade-event-registry:${project.arcade_version}")
	include(modImplementation "net.casualchampionships:arcade-utils:${project.arcade_version}")
	include(modImplementation "net.casualchampionships:arcade-dimensions:${project.arcade_version}")
	include(modImplementation "net.casualchampionships:arcade-scheduler:${project.arcade_version}")

	modImplementation include("eu.pb4:polymer-core:${project.polymer_version}")
	//TODO: remove when code usage removed. Superseded by arcade's apis.
	//TODO: fix weird compilation errors when symbols from fabric-api are not found. Does this have to do with fabric-language kotlin, arcade, or?
//	include(modImplementation "xyz.nucleoid:fantasy:${project.fantasy_version}")
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

	
}

processResources {
	inputs.property "version", project.version
	inputs.property "minecraft_version", project.minecraft_version

	filesMatching("fabric.mod.json") {
		def props = [
				"version": project.version,
				"minecraft_version": project.minecraft_version,
				"fabric_language_kotlin_version": project.fabric_language_kotlin_version,
				"arcade_version": project.arcade_version
		]
		expand props
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.withType(KotlinCompile).configureEach {
	compilerOptions {
		jvmTarget.set(JvmTarget.JVM_21)
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}